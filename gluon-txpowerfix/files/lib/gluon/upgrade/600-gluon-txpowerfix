#!/usr/bin/lua

local util = require 'gluon.util'
local uci = require('simple-uci').cursor()
local site = require 'gluon.site'

local function cmd(_command)
  local f = io.popen(_command)
  local l = f:read("*a")
  f:close()
  return l
end

local function fix_radio(radio, index, config)
  local hwmode = uci:get('wireless', radio, 'hwmode')
  local channel = tonumber(uci:get('wireless', radio, 'channel'))
  local htmode = 'HT20'
  local is_ac

  if type(config.require_mode) == 'string' then
    uci:set('wireless', radio, 'require_mode', config.require_mode)
  else
    uci:delete('wireless', radio, 'require_mode')
  end

  if type(config.htmode) == 'string' then
    htmode = config.htmode
  end

  if type(config.distance) == 'number' then
    uci:set('wireless', radio, 'distance', config.distance)
  else
    uci:delete('wireless', radio, 'distance')
  end

  if config.purge_txpower then
    uci:set('wireless', radio, 'txpower', '20')
  else
    uci:delete('wireless', radio, 'txpower')
  end

  if type(config.require_mode) == 'string' then
    if config.require_mode == 'n' || config.require_mode == 'ac' then
      uci:set('wireless', radio, 'require_mode', config.require_mode)
    else
      uci:set('wireless', radio, 'require_mode', 'n')
    end
  else
    uci:set('wireless', radio, 'require_mode', 'n')
  end
  
  if type(config.tx_power) == 'number' then
    uci:set('wireless', radio, 'txpower', config.tx_power)
  end

  if type(config.country) == 'string' then
    --- set country option
    uci:set('wireless', radio, 'country', config.country)
    --- don't tell the clients the country setting
    uci:set('wireless', radio, 'country_ie', '0')
  end

  --- band 2.4 GHz
  if hwmode == '11g' then

  --- band 5 GHz
  elseif hwmode == '11a' then
    is_ac = cmd('iwinfo ' .. radio .. ' info | grep -o 802.11nac') == '802.11nac'

    --- disable mesh / ibss for ac devices (if configured)
    if is_ac then
      if type(config.ac_htmode) then
        htmode = config.ac_htmode
      end

      if type(config.mesh) == 'table' and config.mesh.ac_disabled then
        uci:set('wireless', 'mesh_' .. radio, 'disabled', '1')
      end

      if type(config.ibss) == 'table' and config.ibss.ac_disabled then
          uci:set('wireless', 'ibss_' .. radio, 'disabled', '1')
      end
    end
  end

  uci:set('wireless', radio, 'htmode', htmode)

  if config.htmode_noscan == '1' then
    uci:set('wireless', radio, 'noscan', '1')
  else
    uci:delete('wireless', radio, 'noscan')
  end

  if config.nowmm == '1' then
    uci:set('wireless', radio, 'wmm', '0')
  else
    uci:set('wireless', radio, 'wmm', '1')
  end

  if type(config.rts_set) == 'number' then
    if tonumber(config.rts_set) > 2346 then
      config.rts_set = 2346
    end
    uci:set('wireless', radio, 'rts', config.rts_set)
  else
    uci:set('wireless', radio, 'rts', 'off')
  end

  if type(config.frag_set) == 'number' then
    if tonumber(config.frag_set) > 2346 then
      config.frag_set = 2346
    end
    uci:set('wireless', radio, 'frag', config.frag_set)
  else
    uci:set('wireless', radio, 'frag', 'off')
  end

  if config.set_11w then
    uci:set('wireless', radio, 'ieee80211w', '1')
  else
    uci:del('wireless', radio, 'ieee80211w')
  end
end

-- Iterate over all radios defined in UCI calling
-- f(radio, index, site.wifiX) for each radio found while passing
--  site.wifi24 for 2.4 GHz devices and site.wifi5 for 5 GHz ones.
function iterate_radios(uci, f)
        local radios = {}

        uci:foreach('wireless', 'wifi-device',
        function(s)
                table.insert(radios, s['.name'])
        end
        )

        for index, radio in ipairs(radios) do
                local hwmode = uci:get('wireless', radio, 'hwmode')

                if hwmode == '11g' or hwmode == '11ng' then
                        f(radio, index, site.wifi24)
                elseif hwmode == '11a' or hwmode == '11na' then
                        f(radio, index, site.wifi5)
                end
        end
end

iterate_radios(uci, fix_radio)

uci:save('wireless')
uci:commit('wireless')
